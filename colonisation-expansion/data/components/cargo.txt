Object.Cargo : components.Cargo::Cargo {
local:
	CargoStorage@[] getCargo();
	safe double get_cargoCapacity();
	safe double get_cargoStored();

	// [[ MODIFY BASE GAME START ]]
	// Looks safe to my uneducated and ignorant eyes, and I need to call it
	// from CargoOrder anyway, so here goes marking it as safe and hoping
	// for the best
	safe double getCargoStored(uint type);
	// [[ MODIFY BASE GAME END ]]
	safe uint get_cargoTypes();
	uint get_cargoType(uint index);

server:
	void modCargoStorage(double amount);
	// [[ MODIFY BASE GAME START ]]
	void overrideCargoStorage(double amount);
	// [[ MODIFY BASE GAME END ]]
	void addCargo(uint type, double amount);
	void removeCargo(uint type, double amount);
	double consumeCargo(uint type, double amount, bool partial = false);
	void transferAllCargoTo(Object@ other);
	void transferPrimaryCargoTo(Object@ other, double rate);
	void transferCargoTo(uint type, Object@ other);

	void writeCargo(Message& msg) const;
	bool writeCargoDelta(Message& msg) const;
	// [[ MODIFY BASE GAME START ]]
	void destroyCargo();
	// [[ MODIFY BASE GAME END ]]

shadow:
	void readCargo(Message& msg);
	void readCargoDelta(Message& msg);
}
